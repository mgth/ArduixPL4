/*  ArduHA - ArduixPL - xPL library for Arduino(tm)  Copyright (c) 2012/2014 Mathieu GRENET.  All right reserved.  This file is part of ArduHA / ArduixPL.    ArduixPL is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    ArduixPL is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with ArduixPL.  If not, see <http://www.gnu.org/licenses/>.	  Modified 2014-3-23 by Mathieu GRENET 	  mailto:mathieu@mgth.fr	  http://www.mgth.fr*/#
/*
Largely derived from OneWire lib from Miles Burton Arduino Temperature Control Library
http://www.milesburton.com/?title=Dallas_Temperature_Control_Library
https://github.com/milesburton/Arduino-Temperature-Control-Library
*/
#ifndef HA_DS18x20_H#define HA_DS18x20_H#include "utility/ha_1wire.h"#include "sensor.h"#include "task.h"#ifndef ONE_WIRE_BUS#define ONE_WIRE_BUS 7#endifclass HA_DS18x20 : public Task, public AutoList<HA_DS18x20>{private:	static bool _parasite;	static time_t _globalInterval;	bool _pendingRequest;	uint8_t _configuration;	bool readPowerSupply();	void request(uint8_t v);	time_t _interval;protected:	static OneWire _wire;	uint8_t _addr[8];public:	FilterPin<int> temperature;	static void discover(uint8_t resolution = 12);	static HA_DS18x20* getByAddr(uint8_t addr[8]);	static bool startGlobalConversion(time_t interval=NEVER);	void setResolution(uint8_t resolution = 12);	uint8_t getResolution(uint8_t resolution) {return 9 + (_configuration >> 5);}	bool startConversion();	time_t conversionDuration();	int16_t read();	bool pendingRequest() { return _pendingRequest; }	bool global() { return (_globalInterval < maxValue<time_t>()); }	time_t interval() { return global() ? _globalInterval : _interval; }	HA_DS18x20(uint8_t addr[8], uint8_t resolution = 12);	HA_DS18x20(int num, uint8_t resolution = 12);	HA_DS18x20(uint8_t resolution = 12);	void run();};#endif