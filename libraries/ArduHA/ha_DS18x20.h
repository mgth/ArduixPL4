// xPL_Sensor_Dallas.h#ifndef _DALLASTEMPERATURE_h#define _DALLASTEMPERATURE_h#include "utility/ha_1wire.h"#include "utility/sensor.h"#include "utility/task.h"#ifndef ONE_WIRE_BUS#define ONE_WIRE_BUS 7#endifclass HA_DS18x20 : public Filter{	static bool _parasite;	bool _pendingRequest;	uint8_t _configuration;	bool readPowerSupply();	void request(uint8_t v);protected:	static OneWire _wire;	uint8_t _addr[8];public:	void setResolution(uint8_t resolution = 12);	uint8_t getResolution(uint8_t resolution) {return 9 + (_configuration >> 5);}	bool startConversion();	time_t conversionDuration();	int16_t read();	bool pendingRequest() { return _pendingRequest; }	HA_DS18x20(uint8_t addr[8], uint8_t resolution = 12);	HA_DS18x20(int num, uint8_t resolution = 12);	HA_DS18x20(uint8_t resolution = 12);};class HA_DS18x20_Multi : public HA_DS18x20, public AutoList<HA_DS18x20_Multi>{	static bool _globalPendingRequest;public:	static void discover(uint8_t resolution = 12);	static HA_DS18x20* getByAddr(uint8_t addr[8]);	static bool startGlobalConversion();	static bool globalPendingRequest() { return _globalPendingRequest; }	HA_DS18x20_Multi(uint8_t* addr, uint8_t resolution = 12)		:HA_DS18x20(addr, resolution){}	HA_DS18x20_Multi(int num, uint8_t resolution = 12)		:HA_DS18x20(num, resolution){}};class HA_DS18x20_GlobalTask : public Task{private:	time_t _interval;public:	HA_DS18x20_GlobalTask(time_t interval = 0)		:_interval(interval) {		trigTask();	}	virtual void run();};class HA_DS18x20_Task : public Task{private:	time_t _interval;	HA_DS18x20& _sensor;public:	HA_DS18x20_Task(HA_DS18x20& sensor, time_t interval = 0)		:_interval(interval)		,_sensor(sensor){		trigTask();	}	virtual void run();};#endif